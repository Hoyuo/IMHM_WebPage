<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis/mapper.xml">

    <!--converted to mysql-->
    <insert id="register" parameterType="DB.DTO.UserDTO">
        INSERT INTO  user
            (
               user.username
               ,user.password
               ,user.nick
            )
       VALUES
        (#{id},#{pw},#{nick});
    </insert>

    <!--converted to mysql-->
    <select id="login" parameterType="DB.DTO.UserInfoDTO" resultType="DB.DTO.UserDTO">
        SELECT
          user.username
          ,user.password
          ,user.nick
        FROM
            user
        WHERE
            username=#{id} AND password=#{pw}
    </select>

    <select id="searchImage" resultType="DB.DTO.ImageDTO" parameterType="java.lang.Integer">
      SELECT
          music.album_image
      FROM
        music
      WHERE idx=#{id}
    </select>

    <!-- deprecated-->
    <!--<select id="test" parameterType="java.lang.String" resultType="DB.DTO.testDTO">-->
      <!--SELECT-->
            <!--[Title],-->
	        <!--[AlbumName]-->
        <!--FROM [IHMHdb].[dbo].[Music]-->
      <!--WHERE [Title] =#{Title}-->
    <!--</select>-->

    <!--converted to mysql-->
    <select id="searchHistory" parameterType="DB.DTO.searchOffsetDTO" resultType="DB.DTO.HistroyDTO" >
        Select  C.title, C.album_name,C.artist,B.search_date,B.longitude as Longtitude, B.latitude as Latitude, B.music_idx ,C.genre
            From
                user as A Inner JOIN search_history as B on A.idx = B.user_idx Inner Join music as C on B.music_idx = C.idx

        WHERE
            A.username=#{id} order by B.search_date desc
        LIMIT #{offset},#{limit}

    </select>

    <!--converted to mysql-->
    <select id="searchmobileHistory" parameterType="java.lang.String" resultType="DB.DTO.mobileHistoryDTO" >
        SELECT  C.title, C.album_name,C.artist,B.search_date,B.longitude as Longtitude, B.latitude as Latitude, B.music_idx ,C.genre
            FROM
                user as A Inner JOIN search_history as B on A.idx = B.user_idx Inner Join music as C on B.music_idx = C.idx

        WHERE
            A.username=#{id} order by B.search_date desc
    </select>

    <!--deprecated-->
    <!--<select id="getIdList" parameterType="java.lang.String" resultType="java.lang.String">-->
    <!--SELECT-->
      <!--[Username]-->
    <!--FROM [IHMHdb].[dbo].[User]-->
    <!--where [Username]=#{id}-->
    <!--</select>-->

    <!--test completed-->
    <insert id="uploadHistory" parameterType="DB.DTO.UploadHistoryDTO">

    INSERT INTO search_history
               (user_idx
               ,music_idx
               ,latitude
               ,longitude
               ,search_date)
         VALUES
           (
             (SELECT user.idx from user where user.username=#{id} Limit 0,1)
            ,#{musicIdx}
            ,#{latitude},#{longitude}
            ,NOW()
           )

    </insert>

    <!--converted to mysql-->
    <select id="searchMusicByIdx" parameterType="java.lang.Integer" resultType="DB.DTO.MusicDTO">

      Select music.title, music.artist, music.album_name from music where music.idx=#{musicidx} Limit 1;
    </select>

    <update id="updateuuid" parameterType="DB.DTO.uuidDTO">
        UPDATE user SET user.uuid=#{uuid} where user.username=#{id}
    </update>
</mapper>